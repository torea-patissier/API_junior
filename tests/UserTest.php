<?php

namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\User;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;

class UserTest extends ApiTestCase
{
    // This trait provided by AliceBundle will take care of refreshing the database content to a known state before each test
    use RefreshDatabaseTrait;

    // public function testGetCollection(): void
    // {
    //     // The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
    //     $response = static::createClient()->request('GET', '/users');

    //     $this->assertResponseIsSuccessful();
    //     // Asserts that the returned content type is JSON-LD (the default)
    //     $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

    //     // Asserts that the returned JSON is a superset of this one
    //     $this->assertJsonContains([
    //         '@context' => '/contexts/User',
    //         '@id' => '/users',
    //         '@type' => 'hydra:Collection',
    //         'hydra:totalItems' => 100,
    //         'hydra:view' => [
    //             '@id' => '/users?page=1',
    //             '@type' => 'hydra:PartialCollectionView',
    //             'hydra:first' => '/users?page=1',
    //             'hydra:last' => '/users?page=4',
    //             'hydra:next' => '/users?page=2',
    //         ],
    //     ]);
    //     // Because test fixtures are automatically loaded between each test, you can assert on them
    //     $this->assertCount(30, $response->toArray()['hydra:member']);

    //     // Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
    //     // This generated JSON Schema is also used in the OpenAPI spec!
    //     $this->assertMatchesResourceCollectionJsonSchema(User::class);
    // }

    public function testCreateUser(): void
    {
        $response = static::createClient()->request('POST', '/api/register_user', ['json' => [
             'email' => 'testuser@example.com',
             'password' => 'password',
             'lastname' => 'Joe',
             'firstname' => 'Ram',
             'roles' => ['ROLE_USER']
            
        ]]);

         $this->assertResponseStatusCodeSame(201);
    //     //$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
    //     // // $this->assertJsonContains([
    //     // //     '@context' => '/contexts/Book',
    //     // //     '@type' => 'Book',
    //     // //     'isbn' => '0099740915',
    //     // //     'title' => 'The Handmaid\'s Tale',
    //     // //     'description' => 'Brilliantly conceived and executed, this powerful evocation of twenty-first century America gives full rein to Margaret Atwood\'s devastating irony, wit and astute perception.',
    //     // //     'author' => 'Margaret Atwood',
    //     // //     'publicationDate' => '1985-07-31T00:00:00+00:00',
    //     // //     'reviews' => [],
    //     // // ]);
    //     // $this->assertMatchesRegularExpression('~^/books/\d+$~', $response->toArray()['@id']);
    //     // $this->assertMatchesResourceItemJsonSchema(Book::class);
    }

//     public function testCreateInvalidBook(): void
//     {
//         static::createClient()->request('POST', '/books', ['json' => [
//             'isbn' => 'invalid',
//         ]]);

//         $this->assertResponseStatusCodeSame(422);
//         $this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

//         $this->assertJsonContains([
//             '@context' => '/contexts/ConstraintViolationList',
//             '@type' => 'ConstraintViolationList',
//             'hydra:title' => 'An error occurred',
//             'hydra:description' => 'isbn: This value is neither a valid ISBN-10 nor a valid ISBN-13.
// title: This value should not be blank.
// description: This value should not be blank.
// author: This value should not be blank.
// publicationDate: This value should not be null.',
//         ]);
//     }

//     public function testUpdateBook(): void
//     {
//         $client = static::createClient();
//         // findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
//         // ISBN 9786644879585 has been generated by Alice when loading test fixtures.
//         // Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.
//         $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

//         $client->request('PUT', $iri, ['json' => [
//             'title' => 'updated title',
//         ]]);

//         $this->assertResponseIsSuccessful();
//         $this->assertJsonContains([
//             '@id' => $iri,
//             'isbn' => '9781344037075',
//             'title' => 'updated title',
//         ]);
//     }

//     public function testDeleteBook(): void
//     {
//         $client = static::createClient();
//         $iri = $this->findIriBy(Book::class, ['isbn' => '9781344037075']);

//         $client->request('DELETE', $iri);

//         $this->assertResponseStatusCodeSame(204);
//         $this->assertNull(
//             // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
//             static::getContainer()->get('doctrine')->getRepository(Book::class)->findOneBy(['isbn' => '9781344037075'])
//         );
//     }

    // public function testLogin(): void
    // {
    //     $request = static::createClient();
    //     $request->disableReboot();
    //     $response = $request->request('POST', '/api/register_user', ['json' => [
    //          'email' => 'testuser@example.com',
    //          'password' => 'password',
    //          'lastname' => 'Joe',
    //          'firstname' => 'Ram',
    //          'roles' => ['ROLE_USER']
            
    //     ]]);

    //     // $response = $request->request('POST', '/authentication_token', ['json' => [
    //     //     'email' => 'testuser@example.com',
    //     //     'password' => 'password',
    //     // ]]);
    //     dd($response);
        
    //     $this->assertResponseIsSuccessful();
    // }
}